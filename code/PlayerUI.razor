@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	@if(player.PickupProgress > 0)
	{
		<div class="pickupbar">
			<div class="innerpickupbar" style="width: @(player.PickupProgress/player.PickingUpObject.Time*100)%"></div>
		</div>
	}
	@if (player.AttackCooldown > 0)
	{
		<div class="attackcooldownbar">
			<div class="innerattackcooldownbar" style="width: @(player.AttackCooldown/player.MaxAttackCooldown*100)%"></div>
		</div>
	}
	@if (player.TargetedHealth != null)
	{
		<br />
		<div class="otherhealthbar">
			<div class="innerotherhealthbar" style="width: @(player.TargetedHealth.Health/player.TargetedHealth.MaxHealth*100)%"></div>
		</div>
	}
	<div class="healthbar">
		<div class="innerhealthbar" style="width: @(player.Health.Health/player.Health.MaxHealth*100)%"></div>
	</div>
	<div class="hotbar">
		@for (int i = 0; i < player.Slots; i++)
		{
			<div class="slot @(player.SelectedSlot==i?"active":"")">
				@{
					var item = player.PlayerInventory.GetAt(i);
					if (item != null)
					{
						<p class="hotbarcounter">
							@(item.Count)
						</p>
						<ItemRenderPanel ItemId=@item.ItemType.Id></ItemRenderPanel>
					}
				}
			</div>
		}
	</div>
</root>

@code
{

	public PlayerController player => Game.ActiveScene.GetAllComponents<PlayerController>().First(x => x.Network.IsOwner);
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
