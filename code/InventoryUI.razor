@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits PanelComponent

<root>
	
	@if(Object == null) {
		if(TargettingOpenableInventory != null){
			<p class="prompt">[@Input.GetButtonOrigin("OpenInventory")]Open</p>
		}
		return;
	}
	<div class="inventory">
		@for (int i = 0; i < Inventory.Size; i++)
		{
			<InventorySlotPanel Inventory=@Inventory Id=@i></InventorySlotPanel>
		}
		@if (Machine != null)
		{
			<p>Progress: @((Machine.ProcessingTimeTotal != 0)?((int)(100*(1-Machine.ProcessingTimeLeft / Machine.ProcessingTimeTotal)))+"%":"Not Working")</p>
		}
		@if (Burner != null)
		{
			<p>Fuel: @((Burner.Fuel != 0) ? ((int)(Burner.Fuel/Burner.FuelConsumptionRate)) + "s" : "No Fuel")</p>
		}
		@if(ForgingController != null){
			@foreach (Recipe recipe in Game.ActiveScene.GetAllComponents<RecipeRegistry>().First().ofType("smithing")){
				var recipeCopy = recipe;
				<div Tooltip=@recipeCopy.DisplayString() class="craftslot" style="border-color:@(ForgingController.SelectedRecipeId==recipeCopy.Id?"yellow":(recipeCopy.CanCraft(Inventory)?"green":"red"));">
					<ItemRenderPanel ItemId=@recipeCopy.Outputs[0].Id onclick=@(e=>SelectRecipe(recipeCopy.Id))></ItemRenderPanel>
				</div>
			}
			<img class="forgestep" src="forge/hit_light.png" Tooltip="Light Hit" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.HitLight)) />
			<img class="forgestep" src="forge/hit_medium.png" Tooltip="Medium Hit" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.HitMedium)) />
			<img class="forgestep" src="forge/hit_hard.png" Tooltip="Hard Hit" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.HitHard)) />
			<img class="forgestep" src="forge/draw.png" Tooltip="Draw" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.Draw)) />
			<img class="forgestep" src="forge/punch.png" Tooltip="Punch" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.Punch)) />
			<img class="forgestep" src="forge/bend.png" Tooltip="Bend" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.Bend)) />
			<img class="forgestep" src="forge/upset.png" Tooltip="Upset" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.Upset)) />
			<img class="forgestep" src="forge/shrink.png" Tooltip="Shrink" onclick=@(e=>ForgeStep(ForgingController.ForgingStep.Shrink)) />
			<div class="forging_meter">
			@if (ForgingController.SelectedRecipeId != "")
			{
					int pOffset = (int)Game.ActiveScene.GetAllComponents<RecipeRegistry>().First().Recipes[ForgingController.SelectedRecipeId].ProcessingTime;
					int cOffset = ForgingController.Progress;
					if (pOffset < cOffset)
					{
						<div class="forging_marker_p" style="margin-left: @(pOffset*2)px"></div>
						<div class="forging_marker_c" style="margin-left: @((cOffset-pOffset) * 2)px"></div>
					} else {
						<div class="forging_marker_c" style="margin-left: @(cOffset * 2)px"></div>
						<div class="forging_marker_p" style="margin-left: @((pOffset-cOffset)*2)px"></div>
					}
				}
			</div>
		}
	</div>
</root>

@code
{
	[Property]
	public OpenableInventory Object { get; set; } = null;

	public InventoryComponent Inventory => Object?.Components?.Get<InventoryComponent>();
	public MachineController Machine => Object?.Components?.Get<MachineController>();
	public BurningPowerSource Burner => Object?.Components?.Get<BurningPowerSource>();
	public ForgingController ForgingController => Object?.Components?.Get<ForgingController>();
	public OpenableInventory TargettingOpenableInventory => Game.ActiveScene.GetAllComponents<PlayerController>().First(x => x.Network.IsOwner).TargettingOpenableInventory;

	public void ForgeStep(ForgingController.ForgingStep step){
		ForgingController.ForgeStep(step);
	}
	public void SelectRecipe(string recipe){
		ForgingController.SelectRecipe(recipe);
	}

	protected override void OnUpdate()
	{
		base.OnUpdate();
		if (Input.Pressed("OpenInventory"))
		{
			if(Object == null)
			{
				Object = TargettingOpenableInventory;
			} else
			{
				Object = null;
			}
		}
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
